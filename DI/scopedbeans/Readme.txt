1. XML 에 대하여

    XML => 확장 가능한 마크업 언어. 태그명은 작성자가 마음대로 만들수 있다.

    데이터를 표현한다. 문법이 틀리면 안된다.

    Root Element ?
    반드시 1개의 요소는 있어야 하고, 하나의 요소로 둘러쌓여 있어야 한다.


    Element(요소)?
        시작tag + 내용 + 종료tag


    내용, 종료태그가 없을 경우는 /> 로 끝날 수 있다.

    XML문서는 규칙(문법)을 지켜야 한다.


    ex> 전자제품 쇼핑몰에서 여러 회사에게 납품할 상품목록을 xml데이터로 요청하였다.

    회사마다 다른 형태의 xml문서를 보낼 수 있다.


    ex> 정해진 양식대로 xml데이터를 요청한다면?
        - XML스키마 (굉장히 디테일한 구조를 정의할 수 있다.)
        - DTD


    XML스키마도 xml문법으로 작성합니다. 해당 스키마를 읽을 수 있어야, 그 구조에 맞도록
    작성할 수 있다.

    Spring은 여러개의 모듈 프로젝트로 구성되어 있다.
    예를 들면 Spring context (Core), Spring JDBC, Spirng Data JPA, Spring MVC .......
    각각의 모듈별로 설정하는 방법이 있다.
    각각의 모듈마다 제공하는 스키마가 있을 수 있다.

    ex> xml문서는 데이터다. 여러개의 서로다른 xml문서를 통합할 수도 있다.
    만약 회원이라는 요소가 있고 이 요소는 name이라는 요소를 가지고 있다.
    상품이라는 요소가 있고 이 요소는 name이라는 요소를 가지고 있다.
    자바에서는 동일한 이름의 class 를 패키지가 다르게 하여 여러개 가질 수 있다.
    xml문서에서는 xml name space를 이용하여 구분지을 수 있다.


    <네임스페이스명:태그명>

    xmlns="http://www.springframework.org/schema/beans"
    위의 코드는 네임스페이스를 정의한다. 보통은 다음과 같이 정의한다. xmlns뒤에 아무값도 없으면 기본 네임스페이스라고 한다.
    URI값은 실제로 존재하지 않는 경로일 수 있다. 보통 domain명뒤에 path값이 온다.


    xmlns:beans="http://www.springframework.org/schema/beans"


    XML파일을 읽어들이는 것을 XML Parser라고 한다. 파서는 스키마에 맞게 작성되었는지 검사도 한다.
    검사하여 맞게 작성된 문서를 Valid XML문서라고 한다.







